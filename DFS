#include <iostream>
using namespace std;


class TreeNode {
public:
    int value;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) {
        value = val;
        left = nullptr;
        right = nullptr;
    }
};


class BinarySearchTree {
private:
    TreeNode* root;

    
    TreeNode* insertRecursively(TreeNode* node, int value) {
        if (node == nullptr) {
            return new TreeNode(value);
        }

        if (value < node->value) {
            node->left = insertRecursively(node->left, value);
        } else if (value > node->value) {
            node->right = insertRecursively(node->right, value);
        }

        return node;
    }

   
    void inOrderTraversal(TreeNode* node) {
        if (node != nullptr) {
            inOrderTraversal(node->left);
            cout << node->value << " ";
            inOrderTraversal(node->right);
        }
    }

    void preOrderTraversal(TreeNode* node) {
        if (node != nullptr) {
            cout << node->value << " ";
            preOrderTraversal(node->left);
            preOrderTraversal(node->right);
        }
    }

    void postOrderTraversal(TreeNode* node) {
        if (node != nullptr) {
            postOrderTraversal(node->left);
            postOrderTraversal(node->right);
            cout << node->value << " ";
        }
    }

public:
    BinarySearchTree() {
        root = nullptr;
    }

    
    void insert(int value) {
        root = insertRecursively(root, value);
    }

   
    void inOrder() {
        cout << "In-order traversal: ";
        inOrderTraversal(root);
        cout << endl;
    }

    void preOrder() {
        cout << "Pre-order traversal: ";
        preOrderTraversal(root);
        cout << endl;
    }

    void postOrder() {
        cout << "Post-order traversal: ";
        postOrderTraversal(root);
        cout << endl;
    }
};


int main() {
    BinarySearchTree bst;
    bst.insert(5);
    bst.insert(8);
    bst.insert(9);
    bst.insert(4);
    bst.insert(6);
  

    bst.inOrder();
    bst.preOrder();
    bst.postOrder();

    return 0;
}
